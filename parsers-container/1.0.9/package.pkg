KFNlY3Rpb24sIENoYXB0ZXIsIEh0dHBDbGllbnQsIERldGFsaUl0ZW0sIExpZ2h0SXRlbSwgUGFyc2VyU2VhcmNoU2V0dGluZ3MsIEZpbHRlciwgbGFiZWxWYWx1ZSwgRGV0YWxpSXRlbVR5cGUsIE5vdmVsUmV2aWV3cywgY2xpZW50KSA9PiB7DQogICAgdmFyIHJldHVybk9iamVjdCA9IHt9Ow0KICAgIHJldHVybk9iamVjdC5pZCA9ICIxLmFsbG5vdmVsIjsNCiAgICByZXR1cm5PYmplY3QuZGV0YWxpSXRlbVR5cGUgPSBEZXRhbGlJdGVtVHlwZS5Ob3ZlbDsNCiAgICByZXR1cm5PYmplY3QucGFyc2VyTGFuZ3VhZ2UgPSAiZW4iOw0KICAgIHJldHVybk9iamVjdC5uYW1lID0gJ0FsbE5vdmVsJzsNCiAgICByZXR1cm5PYmplY3QubGF0ZXN0VXJsID0gJ2h0dHBzOi8vYWxsbm92ZWwubmV0Lyc7DQogICAgcmV0dXJuT2JqZWN0LnVybCA9ICdodHRwczovL2FsbG5vdmVsLm5ldC8nOw0KICAgIHJldHVybk9iamVjdC5zZWFyY2hVcmwgPSAnaHR0cHM6Ly9hbGxub3ZlbC5uZXQvc2VhcmNoLnBocD9rZXl3b3JkPXtxfSc7DQogICAgcmV0dXJuT2JqZWN0LnBhbmluYXRpb24gPSBmYWxzZTsNCiAgICByZXR1cm5PYmplY3Quc2VhcmNoUGFnaW5hdGlvbiA9IHRydWU7DQogICAgcmV0dXJuT2JqZWN0Lmljb24gPSAnaHR0cHM6Ly9hbGxub3ZlbC5uZXQvbWVkaWEvZmF2aWNvbi5wbmcnOw0KICAgIHJldHVybk9iamVjdC5wYXJzZXJTZWFyY2hTZXR0aW5ncyA9IG5ldyBQYXJzZXJTZWFyY2hTZXR0aW5ncygpOw0KDQogICAgcmV0dXJuT2JqZWN0LnBhcnNlclNlYXJjaFNldHRpbmdzLmdlbnJlcyA9IHsNCiAgICAgICAgbXVsdGlTZWxlY3Rpb246IGZhbHNlLA0KICAgICAgICB2YWx1ZXM6IFsNCiAgICAgICAgICAgIG5ldyBsYWJlbFZhbHVlKCJSb21hbmNlIiwgInJvbWFuY2UuaHRtbD9wYWdlPXtwfSIpLA0KICAgICAgICAgICAgbmV3IGxhYmVsVmFsdWUoIkFkdmVudHVyZSIsICJhZHZlbnR1cmUuaHRtbD9wYWdlPXtwfSIpLA0KICAgICAgICAgICAgbmV3IGxhYmVsVmFsdWUoIlRocmlsbGVyIiwgInRocmlsbGVyLmh0bWw/cGFnZT17cH0iKSwNCiAgICAgICAgICAgIG5ldyBsYWJlbFZhbHVlKCJGYW50YXN5IiwgImZhbnRhc3kuaHRtbD9wYWdlPXtwfSIpLA0KICAgICAgICAgICAgbmV3IGxhYmVsVmFsdWUoIllvdW5nIEFkdWx0IiwgInlvdW5nLWFkdWx0Lmh0bWw/cGFnZT17cH0iKSwNCiAgICAgICAgICAgIG5ldyBsYWJlbFZhbHVlKCJNeXN0ZXJ5IiwgIm15c3RlcnkuaHRtbD9wYWdlPXtwfSIpLA0KICAgICAgICAgICAgbmV3IGxhYmVsVmFsdWUoIkhpc3RvcmljYWwiLCAiaGlzdG9yaWNhbC5odG1sP3BhZ2U9e3B9IiksDQogICAgICAgICAgICBuZXcgbGFiZWxWYWx1ZSgiSG9ycm9yIiwgImhvcnJvci5odG1sP3BhZ2U9e3B9IiksDQogICAgICAgICAgICBuZXcgbGFiZWxWYWx1ZSgiU2NpZW5jZSBGaWN0aW9uIiwgInNjaWVuY2UtZmljdGlvbi5odG1sP3BhZ2U9e3B9IiksDQogICAgICAgICAgICBuZXcgbGFiZWxWYWx1ZSgiSHVtb3JvdXMiLCAiaHVtb3JvdXMuaHRtbD9wYWdlPXtwfSIpLA0KICAgICAgICAgICAgbmV3IGxhYmVsVmFsdWUoIkNocmlzdGlhbiIsICJjaHJpc3RpYW4uaHRtbD9wYWdlPXtwfSIpLA0KICAgICAgICAgICAgbmV3IGxhYmVsVmFsdWUoIldlc3Rlcm4iLCAid2VzdGVybi5odG1sP3BhZ2U9e3B9IikNCiAgICAgICAgXQ0KICAgIH0NCiAgICByZXR1cm5PYmplY3QuZ2V0U2VjdGlvbnMgPSAoa2V5cykgPT4gew0KICAgICAgICB2YXIgc2VjdGlvbnMgPSBbDQogICAgICAgICAgICBuZXcgU2VjdGlvbigibGF0ZXN0IiwgIkxhdGVzdCBVcGRhdGUiLCAiTGF0ZXN0IiwgdHJ1ZSksDQogICAgICAgICAgICBuZXcgU2VjdGlvbigicm9tYW5jZSIsICJSb21hbmNlIiwgIlNlYXJjaCIsIGZhbHNlLCBuZXcgRmlsdGVyKFsicm9tYW5jZS5odG1sP3BhZ2U9e3B9Il0pKSwNCiAgICAgICAgICAgIG5ldyBTZWN0aW9uKCJ5b3VuZy1hZHVsdCIsICJZb3VuZyBBZHVsdCIsICJTZWFyY2giLCBmYWxzZSwgbmV3IEZpbHRlcihbInlvdW5nLWFkdWx0Lmh0bWw/cGFnZT17cH0iXSkpLA0KICAgICAgICBdDQoNCiAgICAgICAgcmV0dXJuIHNlY3Rpb25zLmZpbHRlcih4ID0+ICFrZXlzIHx8IGtleXMuaW5jbHVkZXMoeC5uYW1lKSk7DQogICAgfQ0KDQogICAgcmV0dXJuT2JqZWN0LnRyYW5zbGF0ZVNlY3Rpb24gPSBhc3luYyAoc2VjdGlvbiwgcGFnZSkgPT4gew0KICAgICAgICBpZiAoc2VjdGlvbi5pZGVudGlmaWVyID09ICJMYXRlc3QiKQ0KICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJldHVybk9iamVjdC5sYXRlc3QocGFnZSk7DQogICAgICAgIGVsc2UNCiAgICAgICAgICAgIHJldHVybiBhd2FpdCByZXR1cm5PYmplY3Quc2VhcmNoKHNlY3Rpb24uZmlsdGVyIHx8IHJldHVybk9iamVjdC5kZWZhdWx0RmlsdGVyKCksIHBhZ2UpOw0KICAgIH0NCg0KICAgIHJldHVybk9iamVjdC5kZWZhdWx0RmlsdGVyID0gKCkgPT4gew0KICAgICAgICB2YXIgZmlsdGVyID0gbmV3IEZpbHRlcigpOw0KICAgICAgICByZXR1cm4gZmlsdGVyOw0KICAgIH07DQoNCiAgICByZXR1cm5PYmplY3Quc2VhcmNoID0gYXN5bmMgKGZpbHRlciwgcGFnZSkgPT4gew0KICAgICAgICBpZiAoIWZpbHRlci50aXRsZSkNCiAgICAgICAgICAgIGZpbHRlci50aXRsZSA9ICIiOw0KICAgICAgICBpZiAoZmlsdGVyLmdlbnJlcy5sZW5ndGggPD0gMCAmJiBmaWx0ZXIudGl0bGUgPT0gIiIpDQogICAgICAgICAgICByZXR1cm4gW107DQogICAgICAgIHZhciB1cmwgPSBmaWx0ZXIuZ2VucmVzLmxlbmd0aCA+IDAgPyBmaWx0ZXIuZ2VucmVzWzBdLnRvU3RyaW5nKCkudXJpKHJldHVybk9iamVjdC51cmwpLnJlcGxhY2UoIntwfSIsIHBhZ2UpIDogcmV0dXJuT2JqZWN0LnNlYXJjaFVybC5yZXBsYWNlKCJ7cX0iLCBmaWx0ZXIudGl0bGUpOw0KICAgICAgICB2YXIgcmVzdWx0ID0gW10NCiAgICAgICAgcmV0dXJuT2JqZWN0LnBhcnNlci5qcShhd2FpdCBIdHRwQ2xpZW50LmdldEh0bWwodXJsKSkuZmluZCgiLmxpc3Qtbm92ZWwgYSIpLmZvckVhY2goeCA9PiB7DQogICAgICAgICAgICByZXN1bHQucHVzaChuZXcgTGlnaHRJdGVtKA0KICAgICAgICAgICAgICAgIHguc2VsZWN0KCJpbWciKS5hdHRyKCJzcmMiKS51cmwoKSwNCiAgICAgICAgICAgICAgICB4LnNlbGVjdCgiLnRpdGxlLWhvbWUtbm92ZWwiKS50ZXh0KCksDQogICAgICAgICAgICAgICAgIiIsDQogICAgICAgICAgICAgICAgeC5hdHRyKCJocmVmIikudXJsKCksDQogICAgICAgICAgICAgICAgcmV0dXJuT2JqZWN0Lm5hbWUpKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICB9DQoNCiAgICByZXR1cm5PYmplY3QuZ2V0Tm92ZWwgPSBhc3luYyAobm92ZWxVcmwpID0+IHsNCg0KICAgICAgICB2YXIgY29udGFpbmVyID0gcmV0dXJuT2JqZWN0LnBhcnNlci5qcShhd2FpdCBIdHRwQ2xpZW50LmdldEh0bWwobm92ZWxVcmwpKTsNCiAgICAgICAgdmFyIGNoYXB0ZXJzID0gY29udGFpbmVyLmZpbmQoIi5saXN0LXBhZ2Utbm92ZWwgYSIpLm1hcCh4ID0+IG5ldyBDaGFwdGVyKHgudGV4dChmYWxzZSksIHguYXR0cigiaHJlZiIpLnVybCgpKSk7DQogICAgICAgIHZhciBub3ZlbFJldmlld3MgPSBuZXcgTm92ZWxSZXZpZXdzKCk7DQogICAgICAgIHZhciBpbmZvID0gY29udGFpbmVyLmZpbmQoIi5saXN0LWluZm8iKTsNCiAgICAgICAgbm92ZWxSZXZpZXdzLmdlbnJlcyA9IGluZm8uZXEoMSkuZmluZCgiYSIpLnRleHRBcnJheSgpOw0KICAgICAgICBub3ZlbFJldmlld3MuYXV0aG9yID0gaW5mby5lcSgwKS5zZWxlY3QoImEiKS50ZXh0KGZhbHNlKTsNCiAgICAgICAgbm92ZWxSZXZpZXdzLnV2b3RlcyA9IGluZm8uZXEoMikuc2VsZWN0KCJzcGFuIikuaGFzRWxlbWVudCgpID8gaW5mby5lcSgyKS5zZWxlY3QoInNwYW4iKS50ZXh0KGZhbHNlKSArICIgVmlld3MiIDogIiI7DQogICAgICAgIHJldHVybiBuZXcgRGV0YWxpSXRlbSgNCiAgICAgICAgICAgIGNvbnRhaW5lci5zZWxlY3QoIi5yb3cgaW1nIikuYXR0cigic3JjIikudXJsKCksDQogICAgICAgICAgICBjb250YWluZXIuc2VsZWN0KCIuZGV0YWlsLW5vdmVsIGgxIikudGV4dChmYWxzZSksDQogICAgICAgICAgICBjb250YWluZXIuc2VsZWN0KCIuZGVzLW5vdmVsIikuY2xlYW5Jbm5lckhUTUwoKSwNCiAgICAgICAgICAgIG5vdmVsVXJsLA0KICAgICAgICAgICAgY2hhcHRlcnMsDQogICAgICAgICAgICBub3ZlbFJldmlld3MsDQogICAgICAgICAgICByZXR1cm5PYmplY3QubmFtZSwNCiAgICAgICAgICAgIHVuZGVmaW5lZCwNCiAgICAgICAgKTsNCiAgICB9DQoNCiAgICByZXR1cm5PYmplY3QuZ2V0Q2hhcHRlciA9IGFzeW5jICh1cmwpID0+IHsNCiAgICAgICAgcmV0dXJuIHJldHVybk9iamVjdC5wYXJzZXIuanEoYXdhaXQgbmV3IGNsaWVudCgpLmdldEh0bWwodXJsKSkucmVtb3ZlKCIuYWQtY29udGFpbmVyIikuc2VsZWN0KCIuY29udGVudF9ub3ZlbCIpLmNsZWFuSW5uZXJIVE1MKCk7DQogICAgfQ0KDQogICAgcmV0dXJuT2JqZWN0LmxhdGVzdCA9IGFzeW5jIChwYWdlKSA9PiB7DQogICAgICAgIHZhciB1cmwgPSByZXR1cm5PYmplY3QubGF0ZXN0VXJsLnJlcGxhY2UoIntwfSIsIHBhZ2UudG9TdHJpbmcoKSk7DQogICAgICAgIHZhciBjb250YWluZXIgPSByZXR1cm5PYmplY3QucGFyc2VyLmpxKGF3YWl0IEh0dHBDbGllbnQuZ2V0SHRtbCh1cmwpKTsNCiAgICAgICAgdmFyIHJlc3VsdCA9IFtdOw0KICAgICAgICBjb250YWluZXIuZmluZCgiLmxpc3Qtbm92ZWwgYSIpLmZvckVhY2goeCA9PiB7DQogICAgICAgICAgICByZXN1bHQucHVzaChuZXcgTGlnaHRJdGVtKA0KICAgICAgICAgICAgICAgIHguc2VsZWN0KCJpbWciKS5hdHRyKCJzcmMiKS51cmwoKSwNCiAgICAgICAgICAgICAgICB4LnNlbGVjdCgiLnRpdGxlLWhvbWUtbm92ZWwiKS50ZXh0KGZhbHNlKSwNCiAgICAgICAgICAgICAgICAiIiwNCiAgICAgICAgICAgICAgICB4LmF0dHIoImhyZWYiKS51cmwoKSwNCiAgICAgICAgICAgICAgICByZXR1cm5PYmplY3QubmFtZSkpOw0KICAgICAgICB9KTsNCg0KICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgIH0NCg0KICAgIHJldHVybiByZXR1cm5PYmplY3Q7DQp9Ow==&KFNlY3Rpb24sIENoYXB0ZXIsIEh0dHBDbGllbnQsIERldGFsaUl0ZW0sIExpZ2h0SXRlbSwgUGFyc2VyU2VhcmNoU2V0dGluZ3MsIEZpbHRlciwgbGFiZWxWYWx1ZSwgRGV0YWxpSXRlbVR5cGUsIE5vdmVsUmV2aWV3cywgY2xpZW50LCBJbWFnZUhhbmRsZXIpID0+IHsNCiAgICBjb25zdCByZXR1cm5PYmplY3QgPSB7fTsNCiAgICByZXR1cm5PYmplY3QuaWQgPSAiMS5ib3hub3ZlbCI7DQogICAgcmV0dXJuT2JqZWN0LnBhcnNlckxhbmd1YWdlID0gImVuIjsNCiAgICByZXR1cm5PYmplY3QubmFtZSA9ICdCb3hOb3ZlbCc7DQogICAgcmV0dXJuT2JqZWN0LmRldGFsaUl0ZW1UeXBlID0gRGV0YWxpSXRlbVR5cGUuTm92ZWw7DQogICAgcmV0dXJuT2JqZWN0LmxhdGVzdFVybCA9ICdodHRwczovL2JveG5vdmVsLmNvbS9wYWdlL3twfSc7DQogICAgcmV0dXJuT2JqZWN0LnVybCA9ICdodHRwczovL2JveG5vdmVsLmNvbSc7DQogICAgcmV0dXJuT2JqZWN0LnNlYXJjaFVybCA9ICcnOw0KICAgIHJldHVybk9iamVjdC5wYW5pbmF0aW9uID0gdHJ1ZTsNCiAgICByZXR1cm5PYmplY3Quc2VhcmNoUGFnaW5hdGlvbiA9IHRydWU7DQogICAgcmV0dXJuT2JqZWN0Lmljb24gPSAnaHR0cHM6Ly9ib3hub3ZlbC5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTgvMDQvYm94LWljb24tMTUweDE1MC5wbmcnOw0KICAgIHJldHVybk9iamVjdC5wYXJzZXJTZWFyY2hTZXR0aW5ncyA9IG5ldyBQYXJzZXJTZWFyY2hTZXR0aW5ncygpOw0KICAgIHJldHVybk9iamVjdC5wYXJzZXJTZWFyY2hTZXR0aW5ncy5nZW5yZXMgPSB7DQogICAgICAgIG11bHRpU2VsZWN0aW9uOiB0cnVlLA0KICAgICAgICB2YWx1ZXM6IFsNCiAgICAgICAgXSwNCiAgICB9Ow0KDQogICAgcmV0dXJuT2JqZWN0LmxvYWRTZXR0aW5ncyA9IGFzeW5jICgpID0+IHsNCiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHJldHVybk9iamVjdC5wYXJzZXIuanEoYXdhaXQgSHR0cENsaWVudC5nZXRIdG1sKCJodHRwczovL2JveG5vdmVsLmNvbS8/cz0mcG9zdF90eXBlPXdwLW1hbmdhIikpOw0KICAgICAgICBjb250YWluZXIuZmluZCgiLmNoZWNrYm94LWdyb3VwIC5jaGVja2JveCIpLmZvckVhY2goeCA9PiB7DQogICAgICAgICAgICByZXR1cm5PYmplY3QucGFyc2VyU2VhcmNoU2V0dGluZ3MuZ2VucmVzLnZhbHVlcy5wdXNoKG5ldyBsYWJlbFZhbHVlKHguc2VsZWN0KCJsYWJlbCIpLnRleHQoKSwgeC5zZWxlY3QoImlucHV0IikuYXR0cigidmFsdWUiKS50ZXh0KCkpKTsNCiAgICAgICAgfSkNCiAgICB9DQogICAgcmV0dXJuT2JqZWN0LnBhcnNlclNlYXJjaFNldHRpbmdzLnNvcnRUeXBlcyA9IHsNCiAgICAgICAgbXVsdGlTZWxlY3Rpb246IGZhbHNlLA0KICAgICAgICB2YWx1ZXM6IFsNCiAgICAgICAgICAgIG5ldyBsYWJlbFZhbHVlKCdMYXRlc3QgUmVsZWFzZSBOb3ZlbCcsICdsYXRlc3QnKSwNCiAgICAgICAgICAgIG5ldyBsYWJlbFZhbHVlKCdSZWxldmFuY2UnLCAnJyksDQogICAgICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnUmF0aW5nJywgJ3JhdGluZycpLA0KICAgICAgICAgICAgbmV3IGxhYmVsVmFsdWUoJ1RyZW5kaW5nJywgJ3RyZW5kaW5nJyksDQogICAgICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnTW9zdCBWaWV3cycsICd2aWV3cycpLA0KICAgICAgICAgICAgbmV3IGxhYmVsVmFsdWUoJ05ldycsICduZXctbWFuZ2EnKSwNCiAgICAgICAgXSwNCiAgICB9Ow0KICAgIHJldHVybk9iamVjdC5nZXRTZWN0aW9ucyA9IChrZXlzKSA9PiB7DQogICAgICAgIHZhciBzZWN0aW9ucyA9IFsNCiAgICAgICAgICAgIG5ldyBTZWN0aW9uKCJsYXRlc3QiLCAiTGF0ZXN0IFVwZGF0ZSIsICJMYXRlc3QiLCB0cnVlKSwNCiAgICAgICAgICAgIG5ldyBTZWN0aW9uKCJuZXciLCAiTmV3IE5vdmVscyIsICJTZWFyY2giLCBmYWxzZSwgbmV3IEZpbHRlcih1bmRlZmluZWQsICJuZXctbWFuZ2EiKSksDQogICAgICAgICAgICBuZXcgU2VjdGlvbigiTW9zdCBWaWV3cyIsICJNb3N0IFZpZXdzIiwgIlNlYXJjaCIsIGZhbHNlLCBuZXcgRmlsdGVyKHVuZGVmaW5lZCwgInZpZXdzIikpLA0KICAgICAgICBdDQogICAgICAgIHJldHVybiBzZWN0aW9ucy5maWx0ZXIoeCA9PiAha2V5cyB8fCBrZXlzLmluY2x1ZGVzKHgubmFtZSkpOw0KICAgIH0NCiAgICByZXR1cm5PYmplY3QudHJhbnNsYXRlU2VjdGlvbiA9IGFzeW5jIChzZWN0aW9uLCBwYWdlKSA9PiB7DQogICAgICAgIGlmIChzZWN0aW9uLmlkZW50aWZpZXIgPT0gIkxhdGVzdCIpIHJldHVybiBhd2FpdCByZXR1cm5PYmplY3QubGF0ZXN0KHBhZ2UpOw0KICAgICAgICBlbHNlIHJldHVybiBhd2FpdCByZXR1cm5PYmplY3Quc2VhcmNoKHNlY3Rpb24uZmlsdGVyIHx8IHJldHVybk9iamVjdC5kZWZhdWx0RmlsdGVyKCksIHBhZ2UpOw0KICAgIH0NCiAgICByZXR1cm5PYmplY3QuZGVmYXVsdEZpbHRlciA9ICgpID0+IHsNCiAgICAgICAgdmFyIGZpbHRlciA9IG5ldyBGaWx0ZXIoKTsNCiAgICAgICAgcmV0dXJuIGZpbHRlcjsNCiAgICB9Ow0KDQogICAgLy9odHRwczovL2JveG5vdmVsLmNvbS9wYWdlLzIvP3MmcG9zdF90eXBlPXdwLW1hbmdhJmdlbnJlJTVCMCU1RD1hY3Rpb24mZ2VucmUlNUIxJTVEPWFkdmVudHVyZSZvcCZhdXRob3ImYXJ0aXN0JnJlbGVhc2UmYWR1bHQmbV9vcmRlcmJ5PWxhdGVzdA0KICAgIHJldHVybk9iamVjdC5zZWFyY2ggPSBhc3luYyAoZmlsdGVyLCBwYWdlKSA9PiB7DQogICAgICAgIHZhciB1cmwgPSBgaHR0cHM6Ly9ib3hub3ZlbC5jb20vcGFnZS8ke3BhZ2V9Lz9zPSR7ZmlsdGVyLnRpdGxlIHx8ICIifSZwb3N0X3R5cGU9d3AtbWFuZ2Eme2dlbnJlfSZvcCZhdXRob3ImYXJ0aXN0JnJlbGVhc2UmYWR1bHQmbV9vcmRlcmJ5PSR7ZmlsdGVyLnNvcnRUeXBlIHx8ICIifWANCiAgICAgICAgaWYgKGZpbHRlci5nZW5yZXMgJiYgZmlsdGVyLmdlbnJlcy5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgie2dlbnJlfSIsIGZpbHRlci5nZW5yZXMubWFwKHggPT4gImdlbnJlJTVCMCU1RD0iICsgeCkuam9pbigiJiIpKQ0KICAgICAgICB9IGVsc2UgdXJsID0gdXJsLnJlcGxhY2UoIiZ7Z2VucmV9IiwgIiIpDQogICAgICAgIHZhciBjb250YWluZXIgPSByZXR1cm5PYmplY3QucGFyc2VyLmpxKGF3YWl0IEh0dHBDbGllbnQuZ2V0SHRtbCh1cmwpKTsNCiAgICAgICAgdmFyIHJlc3VsdCA9IFtdOw0KICAgICAgICBjb250YWluZXIuZmluZCgnLnRhYi1jb250ZW50LXdyYXAgLmMtdGFicy1pdGVtIC50YWItdGh1bWIgYScpLmZvckVhY2goKHgpID0+IHsNCiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBMaWdodEl0ZW0oeC5zZWxlY3QoJ2ltZycpLmF0dHIoInNyYyIpLnVybCgpLCB4LmF0dHIoInRpdGxlIikudGV4dCgpLCAnJywgeC5hdHRyKCJocmVmIikudXJsKCksIHJldHVybk9iamVjdC5uYW1lKSk7DQogICAgICAgIH0pOw0KICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgIH0NCiAgICByZXR1cm5PYmplY3QuZ2V0Q2hhcHRlcnMgPSBhc3luYyAobm92ZWxVcmwpID0+IHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIHZhciBjaGFwdGVycyA9IFtdOw0KICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IHJldHVybk9iamVjdC5wYXJzZXIuanEoYXdhaXQgSHR0cENsaWVudC5wb3N0Rm9ybSgiYWpheC9jaGFwdGVycyIudXJpKG5vdmVsVXJsKSwge2tleTogInRlc3QifSkpOw0KICAgICAgICAgICAgY29udGFpbmVyLmZpbmQoJy5saXN0aW5nLWNoYXB0ZXJzX3dyYXAgYScpLmZvckVhY2goeCA9PiB7DQogICAgICAgICAgICAgICAgY2hhcHRlcnMucHVzaChuZXcgQ2hhcHRlcih4LnRleHQoZmFsc2UpLCB4LmF0dHIoImhyZWYiKS51cmwoKSkpOw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICByZXR1cm4gY2hhcHRlcnMucmV2ZXJzZSgpOw0KICAgICAgICB9IGNhdGNoIChlKSB7DQogICAgICAgICAgICBjb25zb2xlLmxvZyhlKQ0KICAgICAgICAgICAgdGhyb3cgZQ0KICAgICAgICB9DQogICAgfQ0KICAgIHJldHVybk9iamVjdC5nZXROb3ZlbCA9IGFzeW5jIChub3ZlbFVybCkgPT4gew0KICAgICAgICB2YXIgY29udGFpbmVyID0gcmV0dXJuT2JqZWN0LnBhcnNlci5qcShhd2FpdCBIdHRwQ2xpZW50LmdldEh0bWwobm92ZWxVcmwpKTsNCiAgICAgICAgdmFyIGNoYXB0ZXJzID0gYXdhaXQgcmV0dXJuT2JqZWN0LmdldENoYXB0ZXJzKG5vdmVsVXJsKTsNCiAgICAgICAgdmFyIGl0ZW0gPSBuZXcgTm92ZWxSZXZpZXdzKCk7DQogICAgICAgIGl0ZW0uZ2VucmVzID0gY29udGFpbmVyLmZpbmQoIi5nZW5yZXMtY29udGVudCBhIikudGV4dEFycmF5KCk7DQogICAgICAgIGl0ZW0uYXV0aG9yID0gY29udGFpbmVyLmZpbmQoIi5hdXRob3ItY29udGVudCBhIikudGV4dChmYWxzZSkNCiAgICAgICAgaXRlbS5jb21wbGV0ZWQgPSAiU3RhdHVzOiIgKyBjb250YWluZXIuZmluZCgiLnBvc3Qtc3RhdHVzIC5wb3N0LWNvbnRlbnRfaXRlbSIpLmxhc3QoKS5zZWxlY3QoIi5zdW1tYXJ5LWNvbnRlbnQiKS50ZXh0KGZhbHNlKQ0KICAgICAgICBpdGVtLnV2b3RlcyA9ICJSYXRpbmc6IiArIGNvbnRhaW5lci5zZWxlY3QoIi50b3RhbF92b3RlcyIpLnRleHQoZmFsc2UpICsgIi81IjsNCiAgICAgICAgcmV0dXJuIG5ldyBEZXRhbGlJdGVtKGNvbnRhaW5lci5zZWxlY3QoJy5zdW1tYXJ5X2ltYWdlIGltZycpLmF0dHIoInNyYyIpLnVybCgpLCBjb250YWluZXIuc2VsZWN0KCcucG9zdC10aXRsZSBoMScpLnRleHQoZmFsc2UpLCBjb250YWluZXIuc2VsZWN0KCcuc3VtbWFyeV9fY29udGVudCcpLmNsZWFuSW5uZXJIVE1MKCksIG5vdmVsVXJsLCBjaGFwdGVycywgaXRlbSwgcmV0dXJuT2JqZWN0Lm5hbWUsIHVuZGVmaW5lZCk7DQogICAgfQ0KICAgIHJldHVybk9iamVjdC5nZXRDaGFwdGVyID0gYXN5bmMgKHVybCkgPT4gew0KICAgICAgICByZXR1cm4gcmV0dXJuT2JqZWN0LnBhcnNlci5qcShhd2FpdCBuZXcgY2xpZW50KCkuZ2V0SHRtbCh1cmwpKS5zZWxlY3QoJy5yZWFkaW5nLWNvbnRlbnQnKS5jbGVhbklubmVySFRNTCgpOw0KICAgIH0NCiAgICByZXR1cm5PYmplY3QubGF0ZXN0ID0gYXN5bmMgKHBhZ2UpID0+IHsNCiAgICAgICAgdmFyIHVybCA9IHJldHVybk9iamVjdC5sYXRlc3RVcmwucmVwbGFjZSgne3B9JywgcGFnZS50b1N0cmluZygpKTsNCiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHJldHVybk9iamVjdC5wYXJzZXIuanEoYXdhaXQgSHR0cENsaWVudC5nZXRIdG1sKHVybCkpOw0KICAgICAgICB2YXIgcmVzdWx0ID0gW107DQogICAgICAgIGNvbnRhaW5lci5maW5kKCcucGFnZS1saXN0aW5nLWl0ZW0gLnJvdycpLmZvckVhY2goKHgpID0+IHsNCiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBMaWdodEl0ZW0oeC5zZWxlY3QoJ2ltZycpLmF0dHIoInNyYyIpLnVybCgpLCB4LnNlbGVjdCgnLnBvc3QtdGl0bGUgYScpLnRleHQoKSwgJycsIHguc2VsZWN0KCcucG9zdC10aXRsZSBhJykuYXR0cigiaHJlZiIpLnVybCgpLCByZXR1cm5PYmplY3QubmFtZSkpOw0KICAgICAgICB9KTsNCiAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICB9DQogICAgcmV0dXJuIHJldHVybk9iamVjdDsNCn07&&&&&&&&&&&&&KFNlY3Rpb24sIENoYXB0ZXIsIEh0dHBDbGllbnQsIERldGFsaUl0ZW0sIExpZ2h0SXRlbSwgUGFyc2VyU2VhcmNoU2V0dGluZ3MsIEZpbHRlciwgbGFiZWxWYWx1ZSwgRGV0YWxpSXRlbVR5cGUsIE5vdmVsUmV2aWV3cywgY2xpZW50LCBJbWFnZUhhbmRsZXIpID0+IHsNCiAgICBjb25zdCByZXR1cm5PYmplY3QgPSB7fTsNCiAgICByZXR1cm5PYmplY3QuaWQgPSAiMS53dXhpYXdvcmxkIjsNCiAgICByZXR1cm5PYmplY3QuZGV0YWxpSXRlbVR5cGUgPSBEZXRhbGlJdGVtVHlwZS5Ob3ZlbDsNCiAgICByZXR1cm5PYmplY3QucGFyc2VyTGFuZ3VhZ2UgPSAiZW4iOw0KICAgIHJldHVybk9iamVjdC5uYW1lID0gJ1d1eGlhd29ybGQnOw0KICAgIHJldHVybk9iamVjdC5sYXRlc3RVcmwgPSAnaHR0cHM6Ly93d3cud3V4aWF3b3JsZC5jb20vdXBkYXRlcyc7DQogICAgcmV0dXJuT2JqZWN0LnVybCA9ICdodHRwczovL3d3dy53dXhpYXdvcmxkLmNvbSc7DQogICAgcmV0dXJuT2JqZWN0LnNlYXJjaFVybCA9ICdodHRwczovL3d3dy53dXhpYXdvcmxkLmNvbS9hcGkvbm92ZWxzL3NlYXJjaCc7DQogICAgcmV0dXJuT2JqZWN0LnBhbmluYXRpb24gPSBmYWxzZTsNCiAgICByZXR1cm5PYmplY3Quc2VhcmNoUGFnaW5hdGlvbiA9IHRydWU7DQogICAgcmV0dXJuT2JqZWN0Lmljb24gPSAnaHR0cHM6Ly93d3cud3V4aWF3b3JsZC5jb20vZmF2aWNvbi0zMngzMi5wbmc/dj1qd0VrS1h3OFBZJzsNCg0KICAgIHJldHVybk9iamVjdC5wYXJzZXJTZWFyY2hTZXR0aW5ncyA9IG5ldyBQYXJzZXJTZWFyY2hTZXR0aW5ncygpOw0KICAgIHJldHVybk9iamVjdC5wYXJzZXJTZWFyY2hTZXR0aW5ncy5tdWx0aVNlbGVjdGlvbiA9IHRydWU7DQogICAgcmV0dXJuT2JqZWN0LnBhcnNlclNlYXJjaFNldHRpbmdzLmdlbnJlcyA9DQogICAgew0KICAgICAgbXVsdGlTZWxlY3Rpb246IHRydWUsDQogICAgICB2YWx1ZXM6IFsNCiAgICAgICAgbmV3IGxhYmVsVmFsdWUoJ0FjdGlvbicpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnQ2hlYXQgU3lzdGVtcycpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnQ29va2luZycpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnQWxjaGVteScpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnQ3JhZnRpbmcnKSwNCiAgICAgICAgbmV3IGxhYmVsVmFsdWUoJ0NvbWVkeScpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnRmFudGFzeScpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnSGFyZW0nKSwNCiAgICAgICAgbmV3IGxhYmVsVmFsdWUoJ01hdHVyZScpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnS2luZ2RvbSBCdWlsZGluZycpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnTW9kZXJuIFNldHRpbmcnKSwNCiAgICAgICAgbmV3IGxhYmVsVmFsdWUoJ015c3RlcnknKSwNCiAgICAgICAgbmV3IGxhYmVsVmFsdWUoJ1BvbGl0aWNhbCBJbnRyaWd1ZScpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnUGV0cycpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnUG9zdC1hcG9jYWx5cHRpYycpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnUm9tYW5jZScpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnRmVtYWxlIFByb3RhZ29uaXN0JyksDQogICAgICAgIG5ldyBsYWJlbFZhbHVlKCdTY2ktZmknKSwNCiAgICAgICAgbmV3IGxhYmVsVmFsdWUoJ1RocmlsbGVyJyksDQogICAgICAgIG5ldyBsYWJlbFZhbHVlKCdTdXBlcnBvd2VycycpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnVHJhZ2VkeScpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnVmlydHVhbCBSZWFsaXR5JyksDQogICAgICAgIG5ldyBsYWJlbFZhbHVlKCdYaWFueGlhJyksDQogICAgICAgIG5ldyBsYWJlbFZhbHVlKCdXdXhpYScpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnWHVhbmh1YW4nKSwNCiAgICAgICAgbmV3IGxhYmVsVmFsdWUoJ0VzcG9ydHMnKSwNCiAgICAgICAgbmV3IGxhYmVsVmFsdWUoJ0N1bHRpdmF0aW9uJyksDQogICAgICBdLA0KICAgIH07DQoNCiAgICByZXR1cm5PYmplY3QucGFyc2VyU2VhcmNoU2V0dGluZ3MubGFuZ3VhZ2VzID0NCiAgICB7DQogICAgICBtdWx0aVNlbGVjdGlvbjogZmFsc2UsDQogICAgICB2YWx1ZXM6IFsNCiAgICAgICAgbmV3IGxhYmVsVmFsdWUoJ0FueScpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnQ2hpbmVzZScpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnRW5nbGlzaCcpLA0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnS29yZWFuJyksDQogICAgICBdLA0KICAgIH07DQoNCiAgICByZXR1cm5PYmplY3QucGFyc2VyU2VhcmNoU2V0dGluZ3Muc3RhdHVzZXMgPQ0KICAgIHsNCiAgICAgIG11bHRpU2VsZWN0aW9uOiBmYWxzZSwNCiAgICAgIHZhbHVlczogWw0KICAgICAgICBuZXcgbGFiZWxWYWx1ZSgnQW55JywgbnVsbCksDQogICAgICAgIG5ldyBsYWJlbFZhbHVlKCdPbmdvaW5nJywgdHJ1ZSksDQogICAgICAgIG5ldyBsYWJlbFZhbHVlKCdDb21wbGV0ZWQnLCBmYWxzZSksDQogICAgICBdLA0KICAgIH07DQoNCiAgICByZXR1cm5PYmplY3QucGFyc2VyU2VhcmNoU2V0dGluZ3Muc29ydFR5cGVzID0NCiAgICB7DQogICAgICBtdWx0aVNlbGVjdGlvbjogZmFsc2UsDQogICAgICB2YWx1ZXM6IFsNCiAgICAgICAgbmV3IGxhYmVsVmFsdWUoJ05hbWUnKSwNCiAgICAgICAgbmV3IGxhYmVsVmFsdWUoJ1BvcHVsYXInKSwNCiAgICAgICAgbmV3IGxhYmVsVmFsdWUoJ0NoYXB0ZXJzJyksDQogICAgICAgIG5ldyBsYWJlbFZhbHVlKCdOZXcnKSwNCiAgICAgICAgbmV3IGxhYmVsVmFsdWUoJ1JhdGluZycpLA0KICAgICAgXSwNCiAgICB9Ow0KDQoNCiAgICByZXR1cm5PYmplY3QuZ2V0U2VjdGlvbnMgPSAoa2V5cykgPT4gew0KICAgICAgICB2YXIgc2VjdGlvbnMgPSBbDQogICAgICAgICAgbmV3IFNlY3Rpb24oImxhdGVzdCIsICJMYXRlc3QgVXBkYXRlIiwgIkxhdGVzdCIsIHRydWUpLA0KICAgICAgICAgIG5ldyBTZWN0aW9uKCJuZXciLCAiTmV3IE5vdmVsIiwgIlNlYXJjaCIsIGZhbHNlLCBIdHRwQ2xpZW50LmNsb25lSXRlbShyZXR1cm5PYmplY3QuZGVmYXVsdEZpbHRlcigpLCB7IHNvcnRUeXBlOiAiTmV3IiB9KSksDQogICAgICAgICAgbmV3IFNlY3Rpb24oInBvcHVsYXIiLCAiUG9wdWxhciBOb3ZlbCIsICJTZWFyY2giLCBmYWxzZSwgSHR0cENsaWVudC5jbG9uZUl0ZW0ocmV0dXJuT2JqZWN0LmRlZmF1bHRGaWx0ZXIoKSwgeyBzb3J0VHlwZTogIlBvcHVsYXIiIH0pKSwNCiAgICAgICAgICBuZXcgU2VjdGlvbigiY29tcGxldGVkIiwgIkNvbXBsZXRlZCBOb3ZlbCIsICJTZWFyY2giLCBmYWxzZSwgSHR0cENsaWVudC5jbG9uZUl0ZW0ocmV0dXJuT2JqZWN0LmRlZmF1bHRGaWx0ZXIoKSwgeyBhY3RpdmU6IGZhbHNlIH0pKQ0KICAgICAgICBdDQogICAgDQogICAgICAgIHJldHVybiBzZWN0aW9ucy5maWx0ZXIoeCA9PiAha2V5cyB8fCBrZXlzLmluY2x1ZGVzKHgubmFtZSkpOw0KICAgICAgfQ0KICAgIA0KICAgICAgcmV0dXJuT2JqZWN0LnRyYW5zbGF0ZVNlY3Rpb24gPSBhc3luYyAoc2VjdGlvbiwgcGFnZSkgPT4gew0KICAgICAgICBpZiAoc2VjdGlvbi5pZGVudGlmaWVyID09ICJMYXRlc3QiKQ0KICAgICAgICAgIHJldHVybiBhd2FpdCByZXR1cm5PYmplY3QubGF0ZXN0KHBhZ2UpOw0KICAgICAgICBlbHNlDQogICAgICAgICAgcmV0dXJuIGF3YWl0IHJldHVybk9iamVjdC5zZWFyY2goc2VjdGlvbi5maWx0ZXIgfHwgcmV0dXJuT2JqZWN0LmRlZmF1bHRGaWx0ZXIoKSwgcGFnZSk7DQogICAgICB9DQogICAgDQogICAgICByZXR1cm5PYmplY3QuZGVmYXVsdEZpbHRlciA9ICgpID0+IHsNCiAgICAgICAgdmFyIGZpbHRlciA9IG5ldyBGaWx0ZXIoKTsNCiAgICAgICAgZmlsdGVyLmxhbmd1YWdlID0gcmV0dXJuT2JqZWN0LnBhcnNlclNlYXJjaFNldHRpbmdzLmxhbmd1YWdlcy52YWx1ZXMuZmluZEF0KDApLnZhbHVlOw0KICAgICAgICBmaWx0ZXIuc29ydFR5cGUgPSByZXR1cm5PYmplY3QucGFyc2VyU2VhcmNoU2V0dGluZ3Muc29ydFR5cGVzLnZhbHVlcy5maW5kQXQoMCkudmFsdWU7DQogICAgICAgIGZpbHRlci5hY3RpdmUgPSByZXR1cm5PYmplY3QucGFyc2VyU2VhcmNoU2V0dGluZ3Muc3RhdHVzZXMudmFsdWVzLmZpbmRBdCgwKS52YWx1ZTsNCiAgICAgICAgcmV0dXJuIGZpbHRlcjsNCiAgICAgIH0NCiAgICANCiAgICAgIHJldHVybk9iamVjdC5zZWFyY2ggPSBhc3luYyAoZmlsdGVyLCBwYWdlKT0+IHsNCiAgICAgICAgdmFyIGRhdGEgPSBhd2FpdCBIdHRwQ2xpZW50LnBvc3RKc29uKHJldHVybk9iamVjdC5zZWFyY2hVcmwsIGZpbHRlcik7DQogICAgICAgIHJldHVybiBkYXRhICYmIGRhdGEuaXRlbXMNCiAgICAgICAgICA/IGRhdGEuaXRlbXMuZmlsdGVyKCh4KSA9PiAheC5zbmVha1BlZWspLm1hcCgNCiAgICAgICAgICAgICh4KSA9Pg0KICAgICAgICAgICAgICBuZXcgTGlnaHRJdGVtKA0KICAgICAgICAgICAgICAgIHguY292ZXJVcmwsDQogICAgICAgICAgICAgICAgeC5uYW1lLA0KICAgICAgICAgICAgICAgIHguc3lub3BzaXMsDQogICAgICAgICAgICAgICAgeC5zbHVnLnVyaSgnaHR0cHM6Ly93d3cud3V4aWF3b3JsZC5jb20vbm92ZWwvJyksIHJldHVybk9iamVjdC5uYW1lDQogICAgICAgICAgICAgICksDQogICAgICAgICAgKQ0KICAgICAgICAgIDogW107DQogICAgICB9DQogICAgDQogICAgICByZXR1cm5PYmplY3QuZ2V0Tm92ZWw9IGFzeW5jIChub3ZlbFVybCkgPT4gew0KICAgICAgICB2YXIgY29udGFpbmVyID0gcmV0dXJuT2JqZWN0LnBhcnNlci5qcShhd2FpdCBIdHRwQ2xpZW50LmdldEh0bWwobm92ZWxVcmwpKTsNCiAgICAgICAgdmFyIGNoYXB0ZXJzID0gW107DQogICAgICAgIGNvbnRhaW5lci5maW5kKCcubm92ZWwtY29udGVudCAuY2hhcHRlci1pdGVtIGEnKS5mb3JFYWNoKCh4KSA9PiB7DQogICAgICAgICAgY2hhcHRlcnMucHVzaCgNCiAgICAgICAgICAgIG5ldyBDaGFwdGVyKA0KICAgICAgICAgICAgICB4LnRleHQoZmFsc2UpLA0KICAgICAgICAgICAgICB4LmF0dHIoImhyZWYiKS51cmwoKQ0KICAgICAgICAgICAgKSwNCiAgICAgICAgICApOw0KICAgICAgICB9KTsNCiAgICANCiAgICAgICAgdmFyIG5vdmVsUmV2aWV3cyA9IG5ldyBOb3ZlbFJldmlld3MoKTsNCiAgICANCiAgICAgICAgdmFyIG5vZGUgPSBjb250YWluZXIuc2VsZWN0KCIubm92ZWwtYm9keSIpOw0KICAgIA0KICAgICAgICBub3ZlbFJldmlld3MuZ2VucmVzID0gY29udGFpbmVyLmZpbmQoJy5nZW5yZXMgYScpLnRleHRBcnJheSgpOw0KICAgICAgICB2YXIgYXV0aG9yID0gbm9kZS5zZWxlY3QoImR0OmNvbnRhaW5zKEF1dGhvcikiKQ0KICAgICAgICBub3ZlbFJldmlld3MuYXV0aG9yID0gYXV0aG9yLmNsb3Nlc3QoImRpdiIpLmZpbmQoImRkIikudGV4dChmYWxzZSk7DQogICAgICAgIHJldHVybiBuZXcgRGV0YWxpSXRlbSgNCiAgICAgICAgICBjb250YWluZXIuc2VsZWN0KCcuaW1nLXRodW1ibmFpbCcpLmF0dHIoInNyYyIpLnVybCgpLA0KICAgICAgICAgIGNvbnRhaW5lci5zZWxlY3QoJy5ub3ZlbC1ib2R5IGgyJykudGV4dChmYWxzZSksDQogICAgICAgICAgY29udGFpbmVyLmZpbmQoJy5ub3ZlbC1ib3R0b20gPmRpdicpLmVxKDEpLmNsZWFuSW5uZXJIVE1MKCksDQogICAgICAgICAgbm92ZWxVcmwsDQogICAgICAgICAgY2hhcHRlcnMsDQogICAgICAgICAgbm92ZWxSZXZpZXdzLA0KICAgICAgICAgIHJldHVybk9iamVjdC5uYW1lLA0KICAgICAgICApOw0KICAgICAgfQ0KICAgIA0KICAgICAgcmV0dXJuT2JqZWN0LmdldENoYXB0ZXI9IGFzeW5jICh1cmwpID0+IHsNCiAgICAgICAgcmV0dXJuIHJldHVybk9iamVjdC5wYXJzZXIuanEoYXdhaXQgbmV3IGNsaWVudCgpLmdldEh0bWwodXJsKSkuc2VsZWN0KCcjY2hhcHRlci1jb250ZW50JykuY2xlYW5Jbm5lckhUTUwoKTsNCiAgICAgIH0NCiAgICANCiAgICAgIHJldHVybk9iamVjdC5sYXRlc3Q9IGFzeW5jIChwYWdlKSA9PnsNCiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHJldHVybk9iamVjdC5wYXJzZXIuanEoYXdhaXQgSHR0cENsaWVudC5nZXRIdG1sKHJldHVybk9iamVjdC5sYXRlc3RVcmwpKTsNCiAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5maW5kKCcuc2VjdGlvbi1jb250ZW50IC50aXRsZSBhJykubWFwKCh4KSA9PiB7DQogICAgICAgICAgcmV0dXJuIG5ldyBMaWdodEl0ZW0oYXN5bmMgKCkgPT4gew0KICAgICAgICAgICAgdmFyIGVsZW0gPSByZXR1cm5PYmplY3QucGFyc2VyLmpxKGF3YWl0IEh0dHBDbGllbnQuZ2V0SHRtbCh4LmF0dHIoJ2hyZWYnKS51cmwoKSwgdHJ1ZSkpDQogICAgICAgICAgICByZXR1cm4gZWxlbS5zZWxlY3QoIi5pbWctdGh1bWJuYWlsIikuYXR0cigic3JjIikudXJsKCk7DQogICAgICAgICAgfSwgeC50ZXh0KGZhbHNlKSwgJycsIHguYXR0cignaHJlZicpLnVybCgpLCByZXR1cm5PYmplY3QubmFtZSk7DQogICAgICAgIH0pOw0KICAgICAgfQ0KDQogICAgcmV0dXJuIHJldHVybk9iamVjdDsNCn07&&