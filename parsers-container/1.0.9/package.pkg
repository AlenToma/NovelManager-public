KFNlY3Rpb24sIENoYXB0ZXIsIEh0dHBDbGllbnQsIERldGFsaUl0ZW0sIExpZ2h0SXRlbSwgUGFyc2VyU2VhcmNoU2V0dGluZ3MsIEZpbHRlciwgbGFiZWxWYWx1ZSwgRGV0YWxpSXRlbVR5cGUsIE5vdmVsUmV2aWV3cywgY2xpZW50KSA9PiB7DQogICAgdmFyIHJldHVybk9iamVjdCA9IHt9Ow0KICAgIHJldHVybk9iamVjdC5pZCA9ICIxLmFsbG5vdmVsIjsNCiAgICByZXR1cm5PYmplY3QuZGV0YWxpSXRlbVR5cGUgPSBEZXRhbGlJdGVtVHlwZS5Ob3ZlbDsNCiAgICByZXR1cm5PYmplY3QucGFyc2VyTGFuZ3VhZ2UgPSAiZW4iOw0KICAgIHJldHVybk9iamVjdC5uYW1lID0gJ0FsbE5vdmVsJzsNCiAgICByZXR1cm5PYmplY3QubGF0ZXN0VXJsID0gJ2h0dHBzOi8vYWxsbm92ZWwubmV0Lyc7DQogICAgcmV0dXJuT2JqZWN0LnVybCA9ICdodHRwczovL2FsbG5vdmVsLm5ldC8nOw0KICAgIHJldHVybk9iamVjdC5zZWFyY2hVcmwgPSAnaHR0cHM6Ly9hbGxub3ZlbC5uZXQvc2VhcmNoLnBocD9rZXl3b3JkPXtxfSc7DQogICAgcmV0dXJuT2JqZWN0LnBhbmluYXRpb24gPSBmYWxzZTsNCiAgICByZXR1cm5PYmplY3Quc2VhcmNoUGFnaW5hdGlvbiA9IHRydWU7DQogICAgcmV0dXJuT2JqZWN0Lmljb24gPSAnaHR0cHM6Ly9hbGxub3ZlbC5uZXQvbWVkaWEvZmF2aWNvbi5wbmcnOw0KICAgIHJldHVybk9iamVjdC5wYXJzZXJTZWFyY2hTZXR0aW5ncyA9IG5ldyBQYXJzZXJTZWFyY2hTZXR0aW5ncygpOw0KDQogICAgcmV0dXJuT2JqZWN0LnBhcnNlclNlYXJjaFNldHRpbmdzLmdlbnJlcyA9IHsNCiAgICAgICAgbXVsdGlTZWxlY3Rpb246IGZhbHNlLA0KICAgICAgICB2YWx1ZXM6IFsNCiAgICAgICAgICAgIG5ldyBsYWJlbFZhbHVlKCJSb21hbmNlIiwgInJvbWFuY2UuaHRtbD9wYWdlPXtwfSIpLA0KICAgICAgICAgICAgbmV3IGxhYmVsVmFsdWUoIkFkdmVudHVyZSIsICJhZHZlbnR1cmUuaHRtbD9wYWdlPXtwfSIpLA0KICAgICAgICAgICAgbmV3IGxhYmVsVmFsdWUoIlRocmlsbGVyIiwgInRocmlsbGVyLmh0bWw/cGFnZT17cH0iKSwNCiAgICAgICAgICAgIG5ldyBsYWJlbFZhbHVlKCJGYW50YXN5IiwgImZhbnRhc3kuaHRtbD9wYWdlPXtwfSIpLA0KICAgICAgICAgICAgbmV3IGxhYmVsVmFsdWUoIllvdW5nIEFkdWx0IiwgInlvdW5nLWFkdWx0Lmh0bWw/cGFnZT17cH0iKSwNCiAgICAgICAgICAgIG5ldyBsYWJlbFZhbHVlKCJNeXN0ZXJ5IiwgIm15c3RlcnkuaHRtbD9wYWdlPXtwfSIpLA0KICAgICAgICAgICAgbmV3IGxhYmVsVmFsdWUoIkhpc3RvcmljYWwiLCAiaGlzdG9yaWNhbC5odG1sP3BhZ2U9e3B9IiksDQogICAgICAgICAgICBuZXcgbGFiZWxWYWx1ZSgiSG9ycm9yIiwgImhvcnJvci5odG1sP3BhZ2U9e3B9IiksDQogICAgICAgICAgICBuZXcgbGFiZWxWYWx1ZSgiU2NpZW5jZSBGaWN0aW9uIiwgInNjaWVuY2UtZmljdGlvbi5odG1sP3BhZ2U9e3B9IiksDQogICAgICAgICAgICBuZXcgbGFiZWxWYWx1ZSgiSHVtb3JvdXMiLCAiaHVtb3JvdXMuaHRtbD9wYWdlPXtwfSIpLA0KICAgICAgICAgICAgbmV3IGxhYmVsVmFsdWUoIkNocmlzdGlhbiIsICJjaHJpc3RpYW4uaHRtbD9wYWdlPXtwfSIpLA0KICAgICAgICAgICAgbmV3IGxhYmVsVmFsdWUoIldlc3Rlcm4iLCAid2VzdGVybi5odG1sP3BhZ2U9e3B9IikNCiAgICAgICAgXQ0KICAgIH0NCiAgICByZXR1cm5PYmplY3QuZ2V0U2VjdGlvbnMgPSAoa2V5cykgPT4gew0KICAgICAgICB2YXIgc2VjdGlvbnMgPSBbDQogICAgICAgICAgICBuZXcgU2VjdGlvbigibGF0ZXN0IiwgIkxhdGVzdCBVcGRhdGUiLCAiTGF0ZXN0IiwgdHJ1ZSksDQogICAgICAgICAgICBuZXcgU2VjdGlvbigicm9tYW5jZSIsICJSb21hbmNlIiwgIlNlYXJjaCIsIGZhbHNlLCBuZXcgRmlsdGVyKFsicm9tYW5jZS5odG1sP3BhZ2U9e3B9Il0pKSwNCiAgICAgICAgICAgIG5ldyBTZWN0aW9uKCJ5b3VuZy1hZHVsdCIsICJZb3VuZyBBZHVsdCIsICJTZWFyY2giLCBmYWxzZSwgbmV3IEZpbHRlcihbInlvdW5nLWFkdWx0Lmh0bWw/cGFnZT17cH0iXSkpLA0KICAgICAgICBdDQoNCiAgICAgICAgcmV0dXJuIHNlY3Rpb25zLmZpbHRlcih4ID0+ICFrZXlzIHx8IGtleXMuaW5jbHVkZXMoeC5uYW1lKSk7DQogICAgfQ0KDQogICAgcmV0dXJuT2JqZWN0LnRyYW5zbGF0ZVNlY3Rpb24gPSBhc3luYyAoc2VjdGlvbiwgcGFnZSkgPT4gew0KICAgICAgICBpZiAoc2VjdGlvbi5pZGVudGlmaWVyID09ICJMYXRlc3QiKQ0KICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJldHVybk9iamVjdC5sYXRlc3QocGFnZSk7DQogICAgICAgIGVsc2UNCiAgICAgICAgICAgIHJldHVybiBhd2FpdCByZXR1cm5PYmplY3Quc2VhcmNoKHNlY3Rpb24uZmlsdGVyIHx8IHJldHVybk9iamVjdC5kZWZhdWx0RmlsdGVyKCksIHBhZ2UpOw0KICAgIH0NCg0KICAgIHJldHVybk9iamVjdC5kZWZhdWx0RmlsdGVyID0gKCkgPT4gew0KICAgICAgICB2YXIgZmlsdGVyID0gbmV3IEZpbHRlcigpOw0KICAgICAgICByZXR1cm4gZmlsdGVyOw0KICAgIH07DQoNCiAgICByZXR1cm5PYmplY3Quc2VhcmNoID0gYXN5bmMgKGZpbHRlciwgcGFnZSkgPT4gew0KICAgICAgICBpZiAoIWZpbHRlci50aXRsZSkNCiAgICAgICAgICAgIGZpbHRlci50aXRsZSA9ICIiOw0KICAgICAgICBpZiAoZmlsdGVyLmdlbnJlcy5sZW5ndGggPD0gMCAmJiBmaWx0ZXIudGl0bGUgPT0gIiIpDQogICAgICAgICAgICByZXR1cm4gW107DQogICAgICAgIHZhciB1cmwgPSBmaWx0ZXIuZ2VucmVzLmxlbmd0aCA+IDAgPyBmaWx0ZXIuZ2VucmVzWzBdLnRvU3RyaW5nKCkudXJpKHJldHVybk9iamVjdC51cmwpLnJlcGxhY2UoIntwfSIsIHBhZ2UpIDogcmV0dXJuT2JqZWN0LnNlYXJjaFVybC5yZXBsYWNlKCJ7cX0iLCBmaWx0ZXIudGl0bGUpOw0KICAgICAgICB2YXIgcmVzdWx0ID0gW10NCiAgICAgICAgcmV0dXJuT2JqZWN0LnBhcnNlci5qcShhd2FpdCBIdHRwQ2xpZW50LmdldEh0bWwodXJsKSkuZmluZCgiLmxpc3Qtbm92ZWwgYSIpLmZvckVhY2goeCA9PiB7DQogICAgICAgICAgICByZXN1bHQucHVzaChuZXcgTGlnaHRJdGVtKA0KICAgICAgICAgICAgICAgIHguc2VsZWN0KCJpbWciKS5hdHRyKCJzcmMiKS51cmwoKSwNCiAgICAgICAgICAgICAgICB4LnNlbGVjdCgiLnRpdGxlLWhvbWUtbm92ZWwiKS50ZXh0KCksDQogICAgICAgICAgICAgICAgIiIsDQogICAgICAgICAgICAgICAgeC5hdHRyKCJocmVmIikudXJsKCksDQogICAgICAgICAgICAgICAgcmV0dXJuT2JqZWN0Lm5hbWUpKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICB9DQoNCiAgICByZXR1cm5PYmplY3QuZ2V0Tm92ZWwgPSBhc3luYyAobm92ZWxVcmwpID0+IHsNCg0KICAgICAgICB2YXIgY29udGFpbmVyID0gcmV0dXJuT2JqZWN0LnBhcnNlci5qcShhd2FpdCBIdHRwQ2xpZW50LmdldEh0bWwobm92ZWxVcmwpKTsNCiAgICAgICAgdmFyIGNoYXB0ZXJzID0gY29udGFpbmVyLmZpbmQoIi5saXN0LXBhZ2Utbm92ZWwgYSIpLm1hcCh4ID0+IG5ldyBDaGFwdGVyKHgudGV4dChmYWxzZSksIHguYXR0cigiaHJlZiIpLnVybCgpKSk7DQogICAgICAgIHZhciBub3ZlbFJldmlld3MgPSBuZXcgTm92ZWxSZXZpZXdzKCk7DQogICAgICAgIHZhciBpbmZvID0gY29udGFpbmVyLmZpbmQoIi5saXN0LWluZm8iKTsNCiAgICAgICAgbm92ZWxSZXZpZXdzLmdlbnJlcyA9IGluZm8uZXEoMSkuZmluZCgiYSIpLnRleHRBcnJheSgpOw0KICAgICAgICBub3ZlbFJldmlld3MuYXV0aG9yID0gaW5mby5lcSgwKS5zZWxlY3QoImEiKS50ZXh0KGZhbHNlKTsNCiAgICAgICAgbm92ZWxSZXZpZXdzLnV2b3RlcyA9IGluZm8uZXEoMikuc2VsZWN0KCJzcGFuIikuaGFzRWxlbWVudCgpID8gaW5mby5lcSgyKS5zZWxlY3QoInNwYW4iKS50ZXh0KGZhbHNlKSArICIgVmlld3MiIDogIiI7DQogICAgICAgIHJldHVybiBuZXcgRGV0YWxpSXRlbSgNCiAgICAgICAgICAgIGNvbnRhaW5lci5zZWxlY3QoIi5yb3cgaW1nIikuYXR0cigic3JjIikudXJsKCksDQogICAgICAgICAgICBjb250YWluZXIuc2VsZWN0KCIuZGV0YWlsLW5vdmVsIGgxIikudGV4dChmYWxzZSksDQogICAgICAgICAgICBjb250YWluZXIuc2VsZWN0KCIuZGVzLW5vdmVsIikuY2xlYW5Jbm5lckhUTUwoKSwNCiAgICAgICAgICAgIG5vdmVsVXJsLA0KICAgICAgICAgICAgY2hhcHRlcnMsDQogICAgICAgICAgICBub3ZlbFJldmlld3MsDQogICAgICAgICAgICByZXR1cm5PYmplY3QubmFtZSwNCiAgICAgICAgICAgIHVuZGVmaW5lZCwNCiAgICAgICAgKTsNCiAgICB9DQoNCiAgICByZXR1cm5PYmplY3QuZ2V0Q2hhcHRlciA9IGFzeW5jICh1cmwpID0+IHsNCiAgICAgICAgcmV0dXJuIHJldHVybk9iamVjdC5wYXJzZXIuanEoYXdhaXQgbmV3IGNsaWVudCgpLmdldEh0bWwodXJsKSkucmVtb3ZlKCIuYWQtY29udGFpbmVyIikuc2VsZWN0KCIuY29udGVudF9ub3ZlbCIpLmNsZWFuSW5uZXJIVE1MKCk7DQogICAgfQ0KDQogICAgcmV0dXJuT2JqZWN0LmxhdGVzdCA9IGFzeW5jIChwYWdlKSA9PiB7DQogICAgICAgIHZhciB1cmwgPSByZXR1cm5PYmplY3QubGF0ZXN0VXJsLnJlcGxhY2UoIntwfSIsIHBhZ2UudG9TdHJpbmcoKSk7DQogICAgICAgIHZhciBjb250YWluZXIgPSByZXR1cm5PYmplY3QucGFyc2VyLmpxKGF3YWl0IEh0dHBDbGllbnQuZ2V0SHRtbCh1cmwpKTsNCiAgICAgICAgdmFyIHJlc3VsdCA9IFtdOw0KICAgICAgICBjb250YWluZXIuZmluZCgiLmxpc3Qtbm92ZWwgYSIpLmZvckVhY2goeCA9PiB7DQogICAgICAgICAgICByZXN1bHQucHVzaChuZXcgTGlnaHRJdGVtKA0KICAgICAgICAgICAgICAgIHguc2VsZWN0KCJpbWciKS5hdHRyKCJzcmMiKS51cmwoKSwNCiAgICAgICAgICAgICAgICB4LnNlbGVjdCgiLnRpdGxlLWhvbWUtbm92ZWwiKS50ZXh0KGZhbHNlKSwNCiAgICAgICAgICAgICAgICAiIiwNCiAgICAgICAgICAgICAgICB4LmF0dHIoImhyZWYiKS51cmwoKSwNCiAgICAgICAgICAgICAgICByZXR1cm5PYmplY3QubmFtZSkpOw0KICAgICAgICB9KTsNCg0KICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgIH0NCg0KICAgIHJldHVybiByZXR1cm5PYmplY3Q7DQp9Ow==&&&&&&&&&&&&&&&&